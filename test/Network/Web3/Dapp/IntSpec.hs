{-# LANGUAGE DataKinds #-}
{-# LANGUAGE OverloadedStrings #-}

module Network.Web3.Dapp.IntSpec (main, spec) where

import Network.Web3.Dapp.EthABI.Types
import Network.Web3.Dapp.Int
import Test.Hspec

main :: IO ()
main = hspec spec

spec :: Spec
spec = describe "Bytes" $ do
  it "Conversiones Integer" $ do
    map toInteger [-257,-256,-255,-254,-140,-139,-138,-137,-136,-135,-134,-133,-132,-131,-130,-129,-128,-127,-126,-50,-2,-1,0::Sint8] `shouldBe` [-1,0,1,2,116,117,118,119,120,121,122,123,124,125,126,127,-128,-127,-126,-50,-2,-1,0]
    map toInteger [257,256,255,254,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,50,2,1,0::Sint8] `shouldBe` [1,0,-1,-2,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,127,126,50,2,1,0]
    map toInteger [-257,-256,-255,-254,-140,-139,-138,-137,-136,-135,-134,-133,-132,-131,-130,-129,-128,-127,-126,-50,-2,-1,0::Uint8] `shouldBe` [255,0,1,2,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,206,254,255,0]
    map toInteger [257,256,255,254,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,50,2,1,0::Uint8] `shouldBe` [1,0,255,254,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,50,2,1,0]
  it "Operaciones Integer" $ do
    map (\(a,b,c,d) -> (a+b,a-b,c+d,c-d))
        [ (100, 100, 100, 100), (20, 120, 7, 9)
        , (127, 50, -130, -129), (-128, -50, -127, -128)
        , (255, 256, 257, 258), (-258, -256, -255, -254)
        , (-1, -20, 190, -1), (-128, 255, -130, 260)
        , (-1, -1, -1, -1), (127, 127, 127, 127)
        ] `shouldBe`
        [ (-56,0,200,0), (-116,-100,16,254)
        , (-79,77,253,255), (78,-78,1,1)
        , (-1,-1,3,255), (-2,-2,3,255)
        , (-21,19,189,191), (127,-127,130,122)
        , (-2,0,254,0), (-2,0,254,0) :: (Sint8,Sint8,Uint8,Uint8)
        ]
    map (\(a,b,c,d) -> (a+b+c+d,a-b+c-d))
        [ (100, 100, 100, 100), (20, 120, 7, 9)
        , (127, 50, -130, -129), (-128, -50, -127, -128)
        , (255, 256, 257, 258), (-258, -256, -255, -254)
        , (-1, -20, 190, -1), (-128, 255, -130, 260)
        , (-1, -1, -1, -1), (127, 127, 127, 127)
        ] `shouldBe`
        [ (-112,0), (-100,-102), (-82,76), (79,-77), (2,-2)
        , (1,-3), (-88,-46), (1,-5), (-4,0), (-4,0) :: (Sint8, Sint8)
        ]
    map (\(a,b,c,d) -> (a+b+c+d,a-b+c-d))
        [ (100, 100, 100, 100), (20, 120, 7, 9)
        , (127, 50, -130, -129), (-128, -50, -127, -128)
        , (255, 256, 257, 258), (-258, -256, -255, -254)
        , (-1, -20, 190, -1), (-128, 255, -130, 260)
        , (-1, -1, -1, -1), (127, 127, 127, 127)
        ] `shouldBe`
        [ (144,0), (156,154), (174,76), (79,179), (2,254)
        , (1,253), (168,210), (1,251), (252,0), (252,0) :: (Uint8, Uint8)
        ]
  it "Conversiones AbiValue" $ do
    map (fromRight . fromAbiValue . toAbiValue) [-257,-256,-255,-254,-140,-139,-138,-137,-136,-135,-134,-133,-132,-131,-130,-129,-128,-127,-126,-50,-2,-1,0::Sint8] `shouldBe` [-1,0,1,2,116,117,118,119,120,121,122,123,124,125,126,127,-128,-127,-126,-50,-2,-1,0 :: Sint8]
    map (fromRight . fromAbiValue . toAbiValue) [257,256,255,254,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,50,2,1,0::Sint8] `shouldBe` [1,0,-1,-2,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,127,126,50,2,1,0 :: Sint8]
    map (fromRight . fromAbiValue . toAbiValue) [-257,-256,-255,-254,-140,-139,-138,-137,-136,-135,-134,-133,-132,-131,-130,-129,-128,-127,-126,-50,-2,-1,0::Uint8] `shouldBe` [255,0,1,2,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,206,254,255,0 :: Uint8]
    map (fromRight . fromAbiValue . toAbiValue) [257,256,255,254,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,50,2,1,0::Uint8] `shouldBe` [1,0,255,254,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,50,2,1,0 :: Uint8]

