{-# LANGUAGE OverloadedStrings #-}

module Network.Web3.Dapp.EthABISpec (main, spec) where

import qualified Data.ByteString as BS
import qualified Data.ByteString.Char8 as C8
import Data.Maybe (fromJust)
import qualified Data.Text as T
import Data.Word
import Network.Web3.Dapp.Solc
import Network.Web3.Dapp.EthABI
import Network.Web3.Dapp.EthABI.Types
import Network.Web3.HexText
import Network.Web3.Types
import Test.Hspec

main :: IO ()
main = hspec spec

spec :: Spec
spec = describe "EthABI" $ do
    tC <- runIO (head . fromRight . fst' <$> compile (SolcSettings [] []) ["./test/Network/Web3/Dapp/types.sol"])
    it "Codificar y decodificar valores" $ do
      avBool False `shouldBe` "0x0000000000000000000000000000000000000000000000000000000000000000"
      avBool True `shouldBe` "0x0000000000000000000000000000000000000000000000000000000000000001"
      avInt 0xff `shouldBe` "0x00000000000000000000000000000000000000000000000000000000000000ff"
      avInt 0xfff `shouldBe` "0x0000000000000000000000000000000000000000000000000000000000000fff"
      avInt (-1) `shouldBe` "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      avInt (-2) `shouldBe` "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe"
      avInt (-126) `shouldBe` "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82"
      avText "h" `shouldBe` "0x00000000000000000000000000000000000000000000000000000000000000016800000000000000000000000000000000000000000000000000000000000000"
      avText "áéíóú" `shouldBe` "0x000000000000000000000000000000000000000000000000000000000000000ac3a1c3a9c3adc3b3c3ba00000000000000000000000000000000000000000000"
      avText (T.pack longStr) `shouldBe` "0x00000000000000000000000000000000000000000000000000000000000000476162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738393837363534333231307a797877767574737271706f6e6d6c6b6a69686766656463626100000000000000000000000000000000000000000000000000"
      let exAv1 = AVArray $ replicate 5 $ av1 (T.pack longStr) 0xffff (C8.pack longStr)
      av2Hex ps1 DynamicArray exAv1 `shouldBe` exAv1Hex
      decodeAbiValue ps1 DynamicArray (av2Hex ps1 DynamicArray exAv1) `shouldBe` Right exAv1
      let func4I = fromJust $ lookupInterfaceFunction "func4" tC
      toHex (abiEncodedAbiValues $ fromRight $ encodeAbi func4I func4Av) `shouldBe` func4AvHex
      decodeAbi func4I (toHex $ abiEncodedAbiValues $ fromRight $ encodeAbi func4I func4Av) `shouldBe` Right func4Av
      let func4F = fromJust $ lookupFunction "func4" tC
      toCanonical func4F `shouldBe` "func4(uint64,bool[3],int40,string,address,bytes,bool,bytes3[])"
      toHex (functionSelector func4F) `shouldBe` "0x39bc7865"

av2Hex ty tya = toHex . fromRight . encodeAbiValue ty tya
avBool = av2Hex TyBool NoArray . AVBool
avInt = av2Hex int256 NoArray . AVDec
avText = av2Hex TyUtf8 NoArray . AVString

ps1 = TyTuple
  [ Param "p1" TyUtf8 NoArray
  , Param "p2" int256 NoArray
  , Param "p3" TyBytes NoArray
  ]

av1 p1 p2 p3 = AVTuple [AVString p1, AVDec p2, AVBytes p3]

longStr = "abcdefghijklmnopqrstuvwxyz0123456789876543210zyxwvutsrqponmlkjihgfedcba"

exAv1Hex = "0x000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000006200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000ffff00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000476162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738393837363534333231307a797877767574737271706f6e6d6c6b6a6968676665646362610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000476162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738393837363534333231307a797877767574737271706f6e6d6c6b6a696867666564636261000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000ffff00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000476162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738393837363534333231307a797877767574737271706f6e6d6c6b6a6968676665646362610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000476162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738393837363534333231307a797877767574737271706f6e6d6c6b6a696867666564636261000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000ffff00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000476162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738393837363534333231307a797877767574737271706f6e6d6c6b6a6968676665646362610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000476162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738393837363534333231307a797877767574737271706f6e6d6c6b6a696867666564636261000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000ffff00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000476162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738393837363534333231307a797877767574737271706f6e6d6c6b6a6968676665646362610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000476162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738393837363534333231307a797877767574737271706f6e6d6c6b6a696867666564636261000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000ffff00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000476162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738393837363534333231307a797877767574737271706f6e6d6c6b6a6968676665646362610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000476162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738393837363534333231307a797877767574737271706f6e6d6c6b6a69686766656463626100000000000000000000000000000000000000000000000000"

func4Av = (0xffffffffffff::Word64,[True,True,True],-5000::Int,"string"::T.Text,HexEthAddr ("0x79901b9cc8109d2460153869ce11644182c0fa89"::T.Text),"hola"::BS.ByteString,True,["hol","hol","hol"::BS.ByteString])

func4AvHex = "0x0000000000000000000000000000000000000000000000000000ffffffffffff000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec78000000000000000000000000000000000000000000000000000000000000014000000000000000000000000079901b9cc8109d2460153869ce11644182c0fa890000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000006737472696e6700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004686f6c61000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003686f6c0000000000000000000000000000000000000000000000000000000000686f6c0000000000000000000000000000000000000000000000000000000000686f6c0000000000000000000000000000000000000000000000000000000000"

